package djboom.tradering.utils {

	import djboom.functions.getDate;

	import com.junkbyte.console.Cc;

	import flash.errors.IllegalOperationError;
	import flash.utils.Dictionary;

	/**
	 * .
	 * <br>
	 * 
	 * @author DJ BooM 
	 * @since 15.06.2012
	 * 
	 */

	public class Log {

		// ----------------------------------------------------------------------------
		// Коды ошибок.
		// ----------------------------------------------------------------------------

		public static const STARS:String = "***";

		public static const ACTION_NULL:String = "000";

		private static const ERRORS:Dictionary = function():Dictionary {
			var d:Dictionary = new Dictionary();
			d[ACTION_NULL] = "Action не определён";

			// 0XX – Общие ошибки:
			d["001"] = "Внутренняя ошибка";
			d["002"] = "Неверная контрольная сумма";
			d["003"] = "Неизвестный запрос";
			d["004"] = "Пустой запрос";
			d["005"] = "Timeout лонг-пулинга";

			// 1XX – Ошибки создания игры:
			d["101"] = "Неверное или пустое название игры";
			d["102"] = "Неверный формат ставки";
			d["103"] = "Неверное количество игроков";
			d["104"] = "Неверный тип игры";
			d["105"] = "Неверная валюта";
			d["106"] = "Неверная игровая зона";
			d["107"] = "Недостаточно средств для создания или присоединения к игре";

			// 2XX - Присоединение к игре:
			d["201"] = "В игре нет мест";
			d["202"] = "Истекло время подключения к игре";
			d["203"] = "Вы уже присоединены к игре";

			// 3XX – Голосование:
			d["301"] = "Уже голосовали за этого человека";

			return d;
		}();

		// ----------------------------------------------------------------------------
		// Свойства класса.
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Конструктор.
		// ----------------------------------------------------------------------------

		public function Log() {
			throw new IllegalOperationError("Нельзя создать экземпляр класса Log.");
		}

		// ----------------------------------------------------------------------------
		// Приватные методы класса.
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Видимые методы класса.
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Переопределенные методы.
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Обработчики событий.
		// ----------------------------------------------------------------------------

		// ----------------------------------------------------------------------------
		// Публичные методы.
		// ----------------------------------------------------------------------------

		public static function error(code:String, sandbox:* = null):void {
			Cc.error(STARS, ERRORS[code], STARS, sandbox, STARS, getDate());
		}

		public static function errorMessage(message:*, sandbox:* = null):void {
			Cc.error(STARS, message, STARS, sandbox, STARS, getDate());
		}

		public static function message(message:*, sandbox:* = null):void {
			Cc.info(STARS, message, STARS, sandbox, STARS, getDate());
		}

		// ----------------------------------------------------------------------------
		// Методы доступа.
		// ----------------------------------------------------------------------------
	}
}